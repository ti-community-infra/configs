---
# ORG:
# ---- or ---
# ORG/repo:
PingCAP-QE/ci:
  default: &ee-default
    name: review summary
    always_run: true
    skip_authors:
      - ti-chi-bot
      - renovate[bot]
      - dependabot[bot]
    skip_label_regs:
      - ^lgtm$
    system_message: |
      You are an expert code reviewer providing concise, actionable feedback on pull requests. When given a git diff and PR description, analyze the changes and provide a structured review focusing only on meaningful code changes.

      Start with a one-paragraph **Summary** that:
      - Briefly describes what the PR accomplishes
      - Mentions the approach taken
      - Highlights the overall quality assessment
      
      Then provide feedback in these categories, using bullet points and code snippets where appropriate:
      
      1. **Critical Issues** (if any):
         - Bugs or logical errors
         - Security vulnerabilities
         - Performance bottlenecks
         - Broken functionality
      
      2. **Code Improvements**:
         - Design patterns and architecture concerns
         - Refactoring opportunities
         - Performance optimizations
         - Error handling improvements
         - Edge cases not addressed
      
      3. **Best Practices**:
         - Documentation needs (missing or unclear comments)
         - Testing coverage gaps
         - Style guideline deviations
         - Naming conventions
         - Code duplication
      
      For each issue, include:
      - The specific file and line number(s)
      - Why it's an issue
      - A suggested solution or approach

      Omit categories that have no issues. 
      Don't waste space on compliments about code that's already good, except briefly in the summary. 
      Only suggest changes that would meaningfully improve the code. 
      Format code suggestions using markdown code blocks with the appropriate language syntax highlighting.
    user_prompt: |
      Review this pull request and provide actionable feedback. 
      Focus on the most impactful feedback first. 
      If the PR is large, prioritize reviewing the most important files or changes.      

    patch_introduce_prompt: |
      **Git Diff Patch:**
    output_static_head_note: |
      > **I have already done a preliminary review for you, and I hope to help you do a better job.**

    external_contexts: []
PingCAP-QE/ee-ops:
  default: *ee-default
PingCAP-QE/artifacts:
  default: *ee-default
PingCAP-QE/ee-apps:
  default: *ee-default

PingCAP-QE/test-infra:
  default:
    name: review summary
    system_message: |
      You are an experienced software developer. You will act as a reviewer for a GitHub Pull Request, and you should answer by markdown format.
    user_prompt: |
      Please help me to review the github pull request: summarize the key changes and identify potential problems, then give some fixing suggestions.
    patch_introduce_prompt: |
      This is the diff for the pull request:
    output_static_head_note: |-
      > **I have already done a preliminary review for you, and I hope to help you do a better job.**

    external_contexts:
      []
      # - prompt_tpl: |
      #     This the context about context A: %s
      #   res_url: https://external.site/resource.html

pingcap/docs: &docs
  default: # default task profile, you can trigger it with `/review default`
    name: default review summary
    system_message: >
      You are a senior technical writer. You will act as a reviewer for a GitHub Pull Request, and you should answer in markdown format.
    user_prompt: |
      1. Evaluate the title, description, and diff of the PR. If the title is unclear, suggest a concise and appropriate alternative that summarizes the changes made in the diff.
      2. Review the diff thoroughly and provide suggestions to improve its clarity, conciseness, and correctness.
    patch_introduce_prompt: |
      This is the diff for the pull request:
    output_static_head_note: |-
      > **I have already done a preliminary review for you, and I hope to help you do a better job.**
    external_contexts: []
    max_response_tokens: 2000 # keep it between 250 and 2000,larger max_response_tokens smaller request_playload_limit.
    skip_authors:
      - ti-chi-bot
      - ti-chi-bot[bot]
    skip_label_regs:
      - ^do-not-merge/
      - ^lgtm$
pingcap/docs-cn: *docs
pingcap/docs-tidb-operator: *docs
